# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  product(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  productCount(where: UserWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  product: UserManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  product: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  product: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Product {
  id: ID!
  name: String
  manufacturer: Manufacturer
  summary: String
  description: Product_description_Document
  status: String
  productImage: ImageFieldOutput
  prices(
    where: VariantPriceWhereInput! = {}
    orderBy: [VariantPriceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [VariantPrice!]
  pricesCount(where: VariantPriceWhereInput! = {}): Int
  sale: String
  saleStart: DateTime
  saleEnd: DateTime
  salePrices(
    where: VariantPriceWhereInput! = {}
    orderBy: [VariantPriceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [VariantPrice!]
  salePricesCount(where: VariantPriceWhereInput! = {}): Int
}

type Product_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ProductWhereUniqueInput {
  id: ID
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

type CloudImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  name: StringFilter
  manufacturer: ManufacturerWhereInput
  summary: StringFilter
  status: StringNullableFilter
  prices: VariantPriceManyRelationFilter
  sale: StringNullableFilter
  saleStart: DateTimeNullableFilter
  saleEnd: DateTimeNullableFilter
  salePrices: VariantPriceManyRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input VariantPriceManyRelationFilter {
  every: VariantPriceWhereInput
  some: VariantPriceWhereInput
  none: VariantPriceWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input ProductOrderByInput {
  id: OrderDirection
  name: OrderDirection
  summary: OrderDirection
  status: OrderDirection
  sale: OrderDirection
  saleStart: OrderDirection
  saleEnd: OrderDirection
}

input ProductUpdateInput {
  name: String
  manufacturer: ManufacturerRelateToOneForUpdateInput
  summary: String
  description: JSON
  status: String
  productImage: ImageFieldInput
  prices: VariantPriceRelateToManyForUpdateInput
  sale: String
  saleStart: DateTime
  saleEnd: DateTime
  salePrices: VariantPriceRelateToManyForUpdateInput
}

input ManufacturerRelateToOneForUpdateInput {
  create: ManufacturerCreateInput
  connect: ManufacturerWhereUniqueInput
  disconnect: Boolean
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input VariantPriceRelateToManyForUpdateInput {
  disconnect: [VariantPriceWhereUniqueInput!]
  set: [VariantPriceWhereUniqueInput!]
  create: [VariantPriceCreateInput!]
  connect: [VariantPriceWhereUniqueInput!]
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  name: String
  manufacturer: ManufacturerRelateToOneForCreateInput
  summary: String
  description: JSON
  status: String
  productImage: ImageFieldInput
  prices: VariantPriceRelateToManyForCreateInput
  sale: String
  saleStart: DateTime
  saleEnd: DateTime
  salePrices: VariantPriceRelateToManyForCreateInput
}

input ManufacturerRelateToOneForCreateInput {
  create: ManufacturerCreateInput
  connect: ManufacturerWhereUniqueInput
}

input VariantPriceRelateToManyForCreateInput {
  create: [VariantPriceCreateInput!]
  connect: [VariantPriceWhereUniqueInput!]
}

type Variant {
  id: ID!
  name: String
}

input VariantWhereUniqueInput {
  id: ID
}

input VariantWhereInput {
  AND: [VariantWhereInput!]
  OR: [VariantWhereInput!]
  NOT: [VariantWhereInput!]
  id: IDFilter
  name: StringFilter
}

input VariantOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input VariantUpdateInput {
  name: String
}

input VariantUpdateArgs {
  where: VariantWhereUniqueInput!
  data: VariantUpdateInput!
}

input VariantCreateInput {
  name: String
}

type ProductVariant {
  id: ID!
  variant: Variant
  value: String
}

input ProductVariantWhereUniqueInput {
  id: ID
  value: String
}

input ProductVariantWhereInput {
  AND: [ProductVariantWhereInput!]
  OR: [ProductVariantWhereInput!]
  NOT: [ProductVariantWhereInput!]
  id: IDFilter
  variant: VariantWhereInput
  value: StringFilter
}

input ProductVariantOrderByInput {
  id: OrderDirection
  value: OrderDirection
}

input ProductVariantUpdateInput {
  variant: VariantRelateToOneForUpdateInput
  value: String
}

input VariantRelateToOneForUpdateInput {
  create: VariantCreateInput
  connect: VariantWhereUniqueInput
  disconnect: Boolean
}

input ProductVariantUpdateArgs {
  where: ProductVariantWhereUniqueInput!
  data: ProductVariantUpdateInput!
}

input ProductVariantCreateInput {
  variant: VariantRelateToOneForCreateInput
  value: String
}

input VariantRelateToOneForCreateInput {
  create: VariantCreateInput
  connect: VariantWhereUniqueInput
}

type VariantPrice {
  id: ID!
  variant: ProductVariant
  price: Decimal
}

scalar Decimal

input VariantPriceWhereUniqueInput {
  id: ID
}

input VariantPriceWhereInput {
  AND: [VariantPriceWhereInput!]
  OR: [VariantPriceWhereInput!]
  NOT: [VariantPriceWhereInput!]
  id: IDFilter
  variant: ProductVariantWhereInput
  price: DecimalNullableFilter
}

input DecimalNullableFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalNullableFilter
}

input VariantPriceOrderByInput {
  id: OrderDirection
  price: OrderDirection
}

input VariantPriceUpdateInput {
  variant: ProductVariantRelateToOneForUpdateInput
  price: Decimal
}

input ProductVariantRelateToOneForUpdateInput {
  create: ProductVariantCreateInput
  connect: ProductVariantWhereUniqueInput
  disconnect: Boolean
}

input VariantPriceUpdateArgs {
  where: VariantPriceWhereUniqueInput!
  data: VariantPriceUpdateInput!
}

input VariantPriceCreateInput {
  variant: ProductVariantRelateToOneForCreateInput
  price: Decimal
}

input ProductVariantRelateToOneForCreateInput {
  create: ProductVariantCreateInput
  connect: ProductVariantWhereUniqueInput
}

type Manufacturer {
  id: ID!
  name: String
}

input ManufacturerWhereUniqueInput {
  id: ID
}

input ManufacturerWhereInput {
  AND: [ManufacturerWhereInput!]
  OR: [ManufacturerWhereInput!]
  NOT: [ManufacturerWhereInput!]
  id: IDFilter
  name: StringFilter
}

input ManufacturerOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input ManufacturerUpdateInput {
  name: String
}

input ManufacturerUpdateArgs {
  where: ManufacturerWhereUniqueInput!
  data: ManufacturerUpdateInput!
}

input ManufacturerCreateInput {
  name: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(
    where: ProductWhereUniqueInput!
    data: ProductUpdateInput!
  ): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createVariant(data: VariantCreateInput!): Variant
  createVariants(data: [VariantCreateInput!]!): [Variant]
  updateVariant(
    where: VariantWhereUniqueInput!
    data: VariantUpdateInput!
  ): Variant
  updateVariants(data: [VariantUpdateArgs!]!): [Variant]
  deleteVariant(where: VariantWhereUniqueInput!): Variant
  deleteVariants(where: [VariantWhereUniqueInput!]!): [Variant]
  createProductVariant(data: ProductVariantCreateInput!): ProductVariant
  createProductVariants(data: [ProductVariantCreateInput!]!): [ProductVariant]
  updateProductVariant(
    where: ProductVariantWhereUniqueInput!
    data: ProductVariantUpdateInput!
  ): ProductVariant
  updateProductVariants(data: [ProductVariantUpdateArgs!]!): [ProductVariant]
  deleteProductVariant(where: ProductVariantWhereUniqueInput!): ProductVariant
  deleteProductVariants(
    where: [ProductVariantWhereUniqueInput!]!
  ): [ProductVariant]
  createVariantPrice(data: VariantPriceCreateInput!): VariantPrice
  createVariantPrices(data: [VariantPriceCreateInput!]!): [VariantPrice]
  updateVariantPrice(
    where: VariantPriceWhereUniqueInput!
    data: VariantPriceUpdateInput!
  ): VariantPrice
  updateVariantPrices(data: [VariantPriceUpdateArgs!]!): [VariantPrice]
  deleteVariantPrice(where: VariantPriceWhereUniqueInput!): VariantPrice
  deleteVariantPrices(where: [VariantPriceWhereUniqueInput!]!): [VariantPrice]
  createManufacturer(data: ManufacturerCreateInput!): Manufacturer
  createManufacturers(data: [ManufacturerCreateInput!]!): [Manufacturer]
  updateManufacturer(
    where: ManufacturerWhereUniqueInput!
    data: ManufacturerUpdateInput!
  ): Manufacturer
  updateManufacturers(data: [ManufacturerUpdateArgs!]!): [Manufacturer]
  deleteManufacturer(where: ManufacturerWhereUniqueInput!): Manufacturer
  deleteManufacturers(where: [ManufacturerWhereUniqueInput!]!): [Manufacturer]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  variants(
    where: VariantWhereInput! = {}
    orderBy: [VariantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Variant!]
  variant(where: VariantWhereUniqueInput!): Variant
  variantsCount(where: VariantWhereInput! = {}): Int
  productVariants(
    where: ProductVariantWhereInput! = {}
    orderBy: [ProductVariantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductVariant!]
  productVariant(where: ProductVariantWhereUniqueInput!): ProductVariant
  productVariantsCount(where: ProductVariantWhereInput! = {}): Int
  variantPrices(
    where: VariantPriceWhereInput! = {}
    orderBy: [VariantPriceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [VariantPrice!]
  variantPrice(where: VariantPriceWhereUniqueInput!): VariantPrice
  variantPricesCount(where: VariantPriceWhereInput! = {}): Int
  manufacturers(
    where: ManufacturerWhereInput! = {}
    orderBy: [ManufacturerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Manufacturer!]
  manufacturer(where: ManufacturerWhereUniqueInput!): Manufacturer
  manufacturersCount(where: ManufacturerWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
