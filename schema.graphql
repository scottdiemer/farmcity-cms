# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  product(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  productCount(where: UserWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  product: UserManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  product: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  product: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Product {
  id: ID!
  name: String
  description: Product_description_Document
  productImage: ImageFieldOutput
  attributes(
    where: ProductAttributeWhereInput! = {}
    orderBy: [ProductAttributeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductAttribute!]
  attributesCount(where: ProductAttributeWhereInput! = {}): Int
  price: Decimal
}

type Product_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

scalar Decimal

input ProductWhereUniqueInput {
  id: ID
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

type CloudImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  name: StringFilter
  attributes: ProductAttributeManyRelationFilter
  price: DecimalNullableFilter
}

input ProductAttributeManyRelationFilter {
  every: ProductAttributeWhereInput
  some: ProductAttributeWhereInput
  none: ProductAttributeWhereInput
}

input DecimalNullableFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalNullableFilter
}

input ProductOrderByInput {
  id: OrderDirection
  name: OrderDirection
  price: OrderDirection
}

input ProductUpdateInput {
  name: String
  description: JSON
  productImage: ImageFieldInput
  attributes: ProductAttributeRelateToManyForUpdateInput
  price: Decimal
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input ProductAttributeRelateToManyForUpdateInput {
  disconnect: [ProductAttributeWhereUniqueInput!]
  set: [ProductAttributeWhereUniqueInput!]
  create: [ProductAttributeCreateInput!]
  connect: [ProductAttributeWhereUniqueInput!]
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  name: String
  description: JSON
  productImage: ImageFieldInput
  attributes: ProductAttributeRelateToManyForCreateInput
  price: Decimal
}

input ProductAttributeRelateToManyForCreateInput {
  create: [ProductAttributeCreateInput!]
  connect: [ProductAttributeWhereUniqueInput!]
}

type Attribute {
  id: ID!
  name: String
}

input AttributeWhereUniqueInput {
  id: ID
}

input AttributeWhereInput {
  AND: [AttributeWhereInput!]
  OR: [AttributeWhereInput!]
  NOT: [AttributeWhereInput!]
  id: IDFilter
  name: StringFilter
}

input AttributeOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input AttributeUpdateInput {
  name: String
}

input AttributeUpdateArgs {
  where: AttributeWhereUniqueInput!
  data: AttributeUpdateInput!
}

input AttributeCreateInput {
  name: String
}

type ProductAttribute {
  id: ID!
  attribute: Attribute
  value: String
}

input ProductAttributeWhereUniqueInput {
  id: ID
  value: String
}

input ProductAttributeWhereInput {
  AND: [ProductAttributeWhereInput!]
  OR: [ProductAttributeWhereInput!]
  NOT: [ProductAttributeWhereInput!]
  id: IDFilter
  attribute: AttributeWhereInput
  value: StringFilter
}

input ProductAttributeOrderByInput {
  id: OrderDirection
  value: OrderDirection
}

input ProductAttributeUpdateInput {
  attribute: AttributeRelateToOneForUpdateInput
  value: String
}

input AttributeRelateToOneForUpdateInput {
  create: AttributeCreateInput
  connect: AttributeWhereUniqueInput
  disconnect: Boolean
}

input ProductAttributeUpdateArgs {
  where: ProductAttributeWhereUniqueInput!
  data: ProductAttributeUpdateInput!
}

input ProductAttributeCreateInput {
  attribute: AttributeRelateToOneForCreateInput
  value: String
}

input AttributeRelateToOneForCreateInput {
  create: AttributeCreateInput
  connect: AttributeWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(
    where: ProductWhereUniqueInput!
    data: ProductUpdateInput!
  ): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createAttribute(data: AttributeCreateInput!): Attribute
  createAttributes(data: [AttributeCreateInput!]!): [Attribute]
  updateAttribute(
    where: AttributeWhereUniqueInput!
    data: AttributeUpdateInput!
  ): Attribute
  updateAttributes(data: [AttributeUpdateArgs!]!): [Attribute]
  deleteAttribute(where: AttributeWhereUniqueInput!): Attribute
  deleteAttributes(where: [AttributeWhereUniqueInput!]!): [Attribute]
  createProductAttribute(data: ProductAttributeCreateInput!): ProductAttribute
  createProductAttributes(
    data: [ProductAttributeCreateInput!]!
  ): [ProductAttribute]
  updateProductAttribute(
    where: ProductAttributeWhereUniqueInput!
    data: ProductAttributeUpdateInput!
  ): ProductAttribute
  updateProductAttributes(
    data: [ProductAttributeUpdateArgs!]!
  ): [ProductAttribute]
  deleteProductAttribute(
    where: ProductAttributeWhereUniqueInput!
  ): ProductAttribute
  deleteProductAttributes(
    where: [ProductAttributeWhereUniqueInput!]!
  ): [ProductAttribute]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  attributes(
    where: AttributeWhereInput! = {}
    orderBy: [AttributeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Attribute!]
  attribute(where: AttributeWhereUniqueInput!): Attribute
  attributesCount(where: AttributeWhereInput! = {}): Int
  productAttributes(
    where: ProductAttributeWhereInput! = {}
    orderBy: [ProductAttributeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductAttribute!]
  productAttribute(where: ProductAttributeWhereUniqueInput!): ProductAttribute
  productAttributesCount(where: ProductAttributeWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
